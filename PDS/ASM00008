//JOBNAME JOB (ACCT,'ROOM-NBR'),'HOTTEL ELEVATOR',MSGCLASS=S,CLASS=K,
//  TIME=(,30)
//PROCLIB JCLLIB ORDER=USERID.DVL.PROC
//        SET TITLE1='XXX.ASM00008'
//OUTPUT INCLUDE MEMBER=DESTCH
//*-------------------------------------------------------------------*
//*        ASSEMBLY                                                   *
//*-------------------------------------------------------------------*
//STEP02   EXEC HLASMCLG
//C.SYSLIB DD DSN=USERID.MACLIB,DISP=SHR
//         DD DSN=SYS1.MACLIB,DISP=SHR
//C.SYSUT2 DD DSN=&&SYSUT2,UNIT=SYSDA,
//           SPACE=(1700,(600,100))
//C.SYSPUNCH DD DUMMY
//C.SYSIN DD *
         TITLE 'ELEVATOR SIMULATION'
         PRINT NOGEN
*---------------------------------------------------------------------*
*        18 MAY 1981 - CHARLES HOTTEL                                 *
*        KNUTH, FUNDAMENTAL ALGORITHMS, 2ND EDITION, PP 279-293       *
*        ELEVATOR SIMULATION                                          *
*                                                                     *
*        SECTION 2.2.5 EXERCISE 5: MAN NUMBER 10, IN=2, OUT=4         *
*---------------------------------------------------------------------*
* R6 = CURRENT NODE                                                   *
* R4 = FLOOR                                                          *
* R5 = STATE                                                          *
*       + =  GOINGUP                                                  *
*       - =  GOINGDOWN                                                *
*       0 =  NEUTRAL                                                  *
*---------------------------------------------------------------------*
ELEV     START
         STM   R14,R12,12(R13)
         BALR  R15,0
         USING *,R15
         L     R1,MAIN-12
         ST    R13,4(R1)
         ST    R1,8(R13)
         LR    R13,R1
         LM    R10,R11,MAIN-8
         DROP  R15
         USING MAIN,R10,R11
         B     MAIN
         DC    A(SAVE,MAIN,MAIN+4096)
*---------------------------------------------------------------------*
*   MAIN LINE CODE                                                    *
*---------------------------------------------------------------------*
MAIN     EQU   *
         OPEN  (PRINTER,OUTPUT)
         LA    R4,2                FLOOR = 2
         SR    R5,R5               STATE = NEUTRAL
         B     CYCLE
XIT      EQU   *
         CLOSE (PRINTER)
MAIN99   SR    R15,R15
         B     SEXIT
         TITLE 'COMMON SUBROUTINE ENTRY/EXIT'
*
*   COMMON SUBROUTINE ENTRY
*
SENTER   STM   R14,R12,12(R13)
         C     R13,=A(SAVEND)
         BL    SENTER1
         DC    H'0'
         DC    C'SAVE AREA OVERFLOW'
SENTER1  LR    R9,R15
         LA    R15,72(R13)
         ST    R15,8(R13)
         ST    R13,4(R15)
         LR    R13,R15
         BR    R9
*
*   COMMON SUBROUTINE EXIT
*
SEXIT    L     R13,4(R13)
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         OI    15(R13),X'01'
         BR    R14
         TITLE 'REGISTER EQUATES AND USAGE'
*
*   REGISTER EQUATES
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9   SENTER BRANCH TO SUBROUTINE, SUBROUTINE USES AS BASE
R10      EQU   10  BASE REGISTER FOR MAIN
R11      EQU   11  BASE REGISTER FOR MAIN
R12      EQU   12  BASE REGISTER FOR MAIN
R13      EQU   13  SAVE AREA ADDRESS
R14      EQU   14  SEXIT RETURN ADDRESS
R15      EQU   15  BRANCH TO ADDRESS, SENTER COPIES TO R9
*                  RETURN CODE FROM SUBROUTINE
         TITLE 'CYCLE'
*---------------------------------------------------------------------*
* CYCLE IS THE HEART OF SIMULATION CONTROL. IT DECIDES WHICH ACTIVITY *
* IS TO ACT NEXT (NAMELY THE FIRST ELEMENT OF THE WAIT LIST, WHICH WE *
* KNOW IS NOT EMPTY) AND BRANCHES TO IT.                              *
*                                                                     *
* CYCLE1: SETS NEXTINST IN CURRENT NODE THEN BRANCHES TO CYCLE        *
*                                                                     *
* HOLDC: SETS NEXTINST IN CURRENT NODE, BRANCHES TO HOLD, THEN CYCLE  *
*---------------------------------------------------------------------*
CYCLE1   EQU   *
         USING NODE,R6
         ST    R14,NEXTINST
         B     CYCLE
HOLDC    EQU   *
         USING NODE,R6
         ST    R14,NEXTINST
         BAL   R14,HOLD           PUT ON WAITLIST WITH UPDATED NEXTTIME
CYCLE    EQU   *
         L     R6,WAIT+4           PTR TO FIRST NODE ON WAIT LIST
         USING NODE,R6
         L     R0,NEXTTIME
         ST    R0,TIME
         BAL   R14,DELETEW
         L     R15,NEXTINST
         BALR  R14,R15
         TITLE 'INSERT'
*---------------------------------------------------------------------*
* INSERT CURRENT NODE, NODE(R6), BEFORE/TO LEFT OF NODE(R1)           *
* IN QUEUE LIST OR ELEVATOR LIST                                      *
*---------------------------------------------------------------------*
INSERT   EQU   *
         DROP  R6
         USING NODE,R1
         L     R2,LLINK2           R2 <- LLINK2(R1)
         DROP  R1
         USING NODE,R6
         ST    R2,LLINK2           LLINK2(R6) <- R2
         DROP  R6
         USING NODE,R1
         ST    R6,LLINK2           LLINK2(R1) <- R6
         DROP  R1
         USING NODE,R2
         ST    R6,RLINK2           RLINK2(R2) <- R6
         DROP  R2
         USING NODE,R6
         ST    R1,RLINK2           RLINK2(R6) <- R1
         DROP  R6
         BR    R14                 RETURN
         TITLE 'DELETE'
*---------------------------------------------------------------------*
* DELETE CURRENT NODE, NODE(R6), FROM ITS LIST                        *
* IN QUEUE LIST OR ELEVATOR LIST                                      *
*---------------------------------------------------------------------*
DELETE   EQU   *
         USING NODE,R6
         LM    R1,R2,LLINK2        P <- LLINK2(R6) , Q <- RLINK2(R6)
         DROP  R6
         USING NODE,R2
         ST    R1,LLINK2           LLINK2 <- P
         DROP  R2
         USING NODE,R1
         ST    R2,RLINK2           RLINK2(P) <- Q
         DROP  R1
         BR    R14
         TITLE 'IMMED'
*---------------------------------------------------------------------*
* IMMED: INSERT CURRENT NODE, NODE(R6), ON WAIT LIST                  *
*                                                                     *
* HOLD: PUTS CURRENT NODE, NODE(R6), ON WAIT LIST WITH                *
*       NEXTTIME = CURRENT TIME + AMOUNT IN R0                        *
*       IN NEXTTIME ORDER                                             *
*                                                                     *
* SORTIN: ADD CURRENT NODE, NODE(R6), TO WAIT LIST SORTING IT         *
*         INTO RIGHT PLACE BASED ON NEXTTIME FIELD                    *
*---------------------------------------------------------------------*
IMMED    EQU   *
         L     R0,TIME             GET TIME
         USING NODE,R6
         ST    R0,NEXTTIME         NEXTTIME(R6) <- TIME
         LA    R1,WAIT             P <- A(WAIT)
         DROP  R6
         USING NODE,R1
         B     INSRT1              INSERT NODE(R6) TO RIGHT OF NODE(P)
HOLD     A     R0,TIME             R0 <- R0 + TIME
SORTIN   EQU   *                   SORT NODE(R6) INTO WAIT LIST
         DROP  R1
         USING NODE,R6
         ST    R0,NEXTTIME         NEXTTIME <- R0
         LA    R1,WAIT             P <- A(WAIT)
         DROP  R6
         USING NODE,R1
NEXT1    L     R1,LLINK1           P <- LLINK1(WAIT)
         CL    R0,NEXTTIME    COMPARE NEXTTIME FIELDS RIGHT TO LEFT
         BL    NEXT1          REPEAT UNTIL NEXTTIME(R6) GE NEXTTIME (P)
INSRT1   L     R2,RLINK1           Q <- RLINK1(P)
         DROP  R1
         USING NODE,R6
         ST    R2,RLINK1           RLINK1(R6) <- Q
         ST    R1,LLINK1           LLINK1(R6) <- Q
         DROP  R6
         USING NODE,R1
         ST    R6,RLINK1           RLINK1(P) <- R6
         DROP  R1
         USING NODE,R2
         ST    R6,LLINK1           LLINK1(Q) <- R6
         DROP  R2
         BR    R14
         TITLE 'DELETEW'
*---------------------------------------------------------------------*
* DELETEW: DELETE CURRENT NODE, NODE(R6), FROM WAIT LIST              *
*---------------------------------------------------------------------*
DELETEW  EQU   *
         USING NODE,R6
         LM    R1,R2,LLINK1        P <- LLINK1(R6) , Q <- RLINK1(R6)
         DROP  R6
         USING NODE,R2
         ST    R1,LLINK1           LLINK1(Q) <- P
         DROP  R2
         USING NODE,R1
         ST    R2,RLINK1           RLINK1(P) <- Q
         BR    R14
         DROP  R1
         TITLE 'CALLPTR'
*---------------------------------------------------------------------*
* CALLPTR: CALCULATE PTR TO CALL TABLE FOR CURRENT FLOOR              *
*---------------------------------------------------------------------*
CALLPTR  EQU   *
         LR    R7,R4               COPY CURRENT FLOOR
         LTR   R7,R7
         BZ    CALL1
         LR    R8,R7
         SR    R7,R7
CALL2    LA    R7,3(R7)
         BCT   R8,CALL2
CALL1    LA    R7,CALL(R7)         R7 <- PTR CALL TABLE
         BR    R14
         TITLE 'COROUTINE M'
M1       EQU   *                   ENTER, PREPARE FOR SUCCESSOR
         L     R15,=A(VALUES)      COMPUTE INFLOOR, OUTFLOOR, INTERTME
         BAL   R14,SENTER                  GIVEIPTM, CNTR
         L     R0,INTERTME
         BAL   R14,HOLD            PUT NODE(R6) IN WAIT, DELAY INTERTME
*                                  SCHEDULE NEXT MAN
         L     R6,AVAIL            R6 <- AVAIL
         LTR   R6,R6               AVAIL STACK EMPTY?
         BNZ   H1                  NO
         L     R6,POOLMAX          YES, GET POOLMAX
         LA    R6,NODESIZE(R6)     R6 <- POOLMAX + NODESIZE
         ST    R6,POOLMAX          POOLMAX <- R6
         B     H2                  SET VALUES IN NODE
         USING NODE,R6
H1       L     R0,RLINK1           AVAIL STACK SINGLY LINKED VIA RLINK1
         ST    R0,AVAIL            AVAIL <- RLINK1(AVAIL)
H2       SR    R1,R1
         IC    R1,INFLOOR          R1 <- INFLOOR
         STC   R1,IN               SET IN
         SR    R2,R2
         IC    R2,OUTFLOOR         R2 <- OUTFLOOR
         STC   R2,OUT              SET OUT
         MVC   NEXTINST,=XL4'00'   CLEAR NEXTINST
         MVC   MANBR,CNTR+3        SET MAN NUMBER
         LA    R12,0
         L     R15,=A(PRINT)
         BAL   R14,SENTER
M2       EQU   *                   SIGNAL AND WAIT
         LR    R0,R4               R0 <- FLOOR
         SR    R0,R1               R0 <- FLOOR - IN
         ST    R6,TEMP             SAVE R6
         LTR   R0,R0               FLOOR = IN?
         BNZ   H3                  NO
         LA    R6,ELEV1
         L     R0,NEXTINST         IF NXT STEP E6 DOORS NOW CLOSING
         ICM   R0,B'1000',=F'0'
         S     R0,=A(E6)           ELEVATOR AT E6?
         BNZ   H4                  NO
         LA    R0,E3               YES, OPEN DOORS
         ST    R0,NEXTINST         SET NEXTINST TO E3
         BAL   R14,DELETEW         REMOVE FROM WAIT
         B     H5                  REINSERT AT FRONT OF WAIT
H4       SR    R0,R0
         IC    R0,D3               GET D3
         LTR   R0,R0               D3 = ZERO?
         BZ    H3                  YES
         MVI   D1,X'01'            SET D1
         MVI   D3,X'00'            SET D3
H5       BAL   R14,IMMED           INSERT ELEV1 AT FRONT OF WAIT
         B     M3                  R1 & R2 HAVE CHANGED
H3       SR    R2,R1               R2 <- OUT - IN
         LA    R0,1
         LTR   R2,R2               OUT = IN ?
         BP    H6                  BRANCH IF GOINGUP
         LR    R9,R1               R9 <- IN
         M     R8,=F'3'            R9 <- 3*IN
         LA    R1,CALL(R9)         R1 <- PTR CALL TABLE
         STC   R0,2(R1)            CALLDOWN(IN) <- 1
         B     H7
H6       LR    R9,R1
         M     R8,=F'3'
         LA    R1,CALL(R9)
         STC   R0,0(R1)            CALLUP(IN) <- 1
H7       SR    R0,R0
         IC    R0,D2
         LTR   R0,R0
         BNZ   H8                  IF D2 = ZERO, CALL DECISION
         BAL   R14,DECISION
H8       L     R0,ELEV1+16
         ICM   R0,B'1000',=F'0'
         S     R0,=A(E1)
         BNZ   M3                  IF ELEVATOR AT E1, CALL DECISION
         BAL   R14,DECISION
M3       EQU   *                   ENTER QUEUE
         L     R6,TEMP
         SR    R1,R1
         IC    R1,IN
         LTR   R1,R1
         BZ    H9
         LR    R8,R1
         SR    R1,R1
H10      LA    R1,NODESIZE(R1)
         BCT   R8,H10
H9       LA    R1,QUEUE0(R1)       R1 <- A(QUEUE(IN))
         BAL   R14,INSERT          INSERT NODE(R6) AT RIGHT QUEUE(IN)
M4A      L     R0,GIVEUPTM
         BAL   R14,HOLDC           WAIT GIVEUPTM UNITS
M4       EQU   *                   GIVE UP
         L     R0,IN
         S     R0,R4               IN(R6) - FLOOR
         BNZ   M6A
         SR    R0,R0
         IC    R0,D1               FLOOR = IN(R6)
         LTR   R0,R0
         BNZ   M4A
M6A      LA    R12,4
         L     R15,=A(PRINT)
         BAL   R14,SENTER
M6       EQU   *                   GET OUT
         LA    R12,12
         L     R15,=A(PRINT)
         BAL   R14,SENTER
         BAL   R14,DELETE          DELETE NODE(R6)
         L     R0,AVAIL            FROM QUEUE OR ELEVATOR
         ST    R0,RLINK1
         ST    R6,AVAIL
         B     CYCLE
M5       EQU   *                   GET IN
         LA    R12,8
         L     R15,=A(PRINT)
         BAL   R14,SENTER
         BAL   R14,DELETE          NODE(R6) DELETED FROM QUEUE
         LA    R1,ELEVATOR
         BAL   R14,INSERT          INSERT AT RIGHT OF ELEVATOR
         LA    R0,1
         SR    R2,R2
         IC    R2,OUT
         LR    R9,R2               R9 <- OUT
         M     R8,=F'3'            R9 <- 3*OUT
         LA    R9,CALL(R9)         R9 <- PTR TO CALL TABLE
         STC   R0,1(R9)            CALLCAR(OUT(R6)) <- 1
         LTR   R5,R5
         BNZ   CYCLE               STATE NOT NEUTRAL
         SR    R2,R4               OUT - FLOOR
         LR    R5,R2               SET STATE TO PROPER DIRECTION
         LA    R6,ELEV2            R6 <- A(ELEV2)
         BAL   R14,DELETEW         REMOVE E5 ACTION FROM WAIT
         LA    R0,25
         B     E5A                 RESTART E5 ACTION IN 25 UNITS
         TITLE 'COROUTINE E'
E1A      BAL   R14,CYCLE1          SET NEXTINST TO E1, GOTO CYCLE
E1       EQU   *                   WAIT FOR CALL (NO ACTION)
E2A      BAL   R14,HOLDC
E2       EQU   *                   CHANGE STATE
         LA    R12,16
         L     R15,=A(PRINT)
         BAL   R14,SENTER
         LTR   R5,R5               TEST STATE
         BM    I1                  BRANCH IF STATE GOINGUP
         XC    ORWORK,ORWORK       STATE IS GOINGUP
         SR    R0,R0
         BAL   R14,CALLPTR         R7 <- PTR CALL TBL CURRENT FLOOR
         OC    ORWORK,3(R7)
         OC    ORWORK,6(R7)
         OC    ORWORK,9(R7)
         OC    ORWORK,12(R7)
         OC    ORWORK,ORWORK
         BNZ   E3                  BRANCH IF CALLS FOR HIGHER FLOORS
         LR    R8,R7               R8 <- PTR TO CALL TBL CURRENT FLOOR
         S     R8,=F'2'            HAVE PASS CALLED LOWER FLOORS?
         OC    ORWORK(1),0(R8)
         S     R8,=F'3'
         OC    ORWORK(1),0(R8)
         S     R8,=F'3'
         OC    ORWORK(1),0(R8)
         S     R8,=F'3'
         OC    ORWORK(1),0(R8)
         B     I4
I1       EQU   *                   STATE IS GOIN DOWN
         XC    ORWORK,ORWORK
         BAL   R14,CALLPTR
         LR    R8,R7               R8 <- PTR CALL TBL CURR FLOOR
         S     R8,=F'3'
         OC    ORWORK,0(R8)
         S     R8,=F'3'
         OC    ORWORK,0(R8)
         S     R8,=F'3'
         OC    ORWORK,0(R8)
         S     R8,=F'3'
         OC    ORWORK,0(R8)
         OC    ORWORK,ORWORK
         BNZ   E3                  BRANCH IF CALL FOR LOWER FLOORS
         OC    ORWORK(1),4(R7)
         OC    ORWORK(1),7(R7)
         OC    ORWORK(1),10(R7)
         OC    ORWORK(1),13(R7)
I4       LCR   R5,R5               REVERSE DIRECTION OF STATE
I5       XC    0(3,R7),0(R7)       SET CALL VARIABLE TO ZERO
         OC    ORWORK,ORWORK       SHOULD STATE BE NEUTRAL?
         BNZ   E3                  NO
         SR    R5,R5               STATE TO NEUTRAL
E3       EQU   *                   OPEN DOOR
         LA    R12,20
         L     R15,=A(PRINT)
         BAL   R14,SENTER
         LA    R6,ELEV3
         L     R0,LLINK1           IS LLINK1 ZERO?
         LTR   R0,R0               E9 ALREADY SCHEDULED?
         BZ    I3                  NO
         BAL   R14,DELETEW         YES, DELETE FROM WAIT LIST
I3       LA    R0,300
         BAL   R14,HOLD            SCHEDULE E9 AFTER 300 UNITS
         LA    R6,ELEV2
         LA    R0,76
         BAL   R14,HOLD            SCHEDULE E5 AFTER 76 UNITS
         MVI   D2,X'01'
         MVI   D1,X'01'
         LA    R0,20
E4A      LA    R6,ELEV1
         BAL   R14,HOLDC
E4       EQU   *                   LET PEOPLE IN OR OUT
         LR    R0,R4               R0 <- FLOOR
         LA    R6,ELEVATOR         R6 <- A(ELEVATOR)
I6       L     R6,LLINK2           R6 <- LLINK2(R6)
         CL    R6,=A(ELEVATOR)     SEARCH ELEVATOR LIST RIGHT TO LEFT
         BE    I7                  BRANCH IF SEARCH COMPLETE
         CLM   R0,B'0001',OUT      COMPARE OUT(R6) WITH FLOOR
         BNE   I6                  IF NOT EQUAL, CONTINUE SEARCH
         LA    R0,M6               PREPARE SEN MAN TO M6
         B     I8
I7       LR    R7,R4               FLOOR
         LTR   R7,R7
         BZ    I9
         LR    R8,R7
         SR    R7,R7
I10      LA    R7,NODESIZE(R7)     DISPL TO TABLE ENTRY
         BCT   R8,I10
I9       LA    R6,QUEUE0(R7)       R6 <- A(QUEUE(FLOOR))
         L     R6,RLINK2           R6 <- RLINK2(LOC(QUEUE(FLOOR)))
         CL    R6,RLINK2           R6 <- RLINK2(R6)
         BE    I11                 YES QUEUE EMPTY
         BAL   R14,DELETEW         NO CANCEL ACTION M4 FOR THIS MAN
         LA    R0,M5               PREPARE TO SEND MAN TO M5
I8       ST    R0,NEXTINST         NEXTINST = M5 OR M6
         BAL   R14,IMMED
         LA    R0,25               WAIT 25 UNITS
         MVI   PRINTSW,X'00'
         B     E4A                 REPEAT E4
I11      MVI   D1,X'00'
         MVI   D3,X'01'
         CLI   PRINTSW,X'01'
         MVI   PRINTSW,X'01'
         BNE   I2
         LA    R12,24
         L     R15,=A(PRINT)
         BAL   R14,SENTER
I2       B     CYCLE
E5A      BAL   R14,HOLDC
E5       EQU   *
         LA    R12,28
         L     R15,=A(PRINT)
         BAL   R14,SENTER
         SR    R0,R0
         IC    R0,D1
         LTR   R0,R0               D1 = ZERO ?
         BZ    I12
         LA    R0,40               NO, PEOPLE STILL GETTING IN/OUT
         B     E5A
I12      MVI   D3,X'00'            IF D1 = ZERO, SET D3 TO ZERO
         LA    R0,20
         LA    R6,ELEV1
E6A      BAL   R14,HOLDC
E6       EQU   *                   PREPARE TO MOVE
         LTR   R5,R5
         BM    I13                 IF STATE NE GOINGDOWN
*                                  RESET CALLUP & CALLCAR THIS FLOOR
         BAL   R14,CALLPTR
         MVI   0(R7),X'00'         CALLUP(FLOOR) <- ZERO
         MVI   1(R7),X'00'         CALLCAR(FLOOR) <- ZERO
I13      LTR   R5,R5
         BP    I16                 IF STATE NE GOINGUP
         BAL   R14,CALLPTR
         MVI   1(R7),X'00'         CALLCAR(FLOOR) <- ZERO
         MVI   2(R7),X'00'         CALLDOWN(FLOOR) <- ZERO
I16      LTR   R5,R5               ZERO -> NEUTRAL
         BNZ   E6B
         BAL   R14,DECISION
E6B      LTR   R5,R5
         BNZ   I19
         B     E1A                 IF STATE = NEUTRAL, GOTO E1 WAIT
I19      SR    R0,R0
         IC    R0,D2
         LTR   R0,R0
         BZ    I20
         LA    R6,ELEV3            ELSE, IF D2 = ZERO
         BAL   R14,DELETEW         CANCEL ACTIVITY E9
         XC    IN,IN
         XC    LLINK1,LLINK1
         XC    RLINK1,RLINK1
I20      LA    R0,15
         LA    R6,ELEV1
         LTR   R5,R5
         BM    E8A                 IF STATE = GOINGDOWN, GOTO E8
E7A      BAL   R14,HOLDC
E7       EQU   *                   GO UP A FLOOR
         LA    R12,32
         L     R15,=A(PRINT)
         BAL   R14,SENTER
         LA    R4,1(R4)
         LA    R0,51
         BAL   R14,HOLDC
         BAL   R14,CALLPTR
         SR    R0,R0
         ICM   R0,B'0011',0(R7)    CALLUP(FLOOR) OR CALLCAR(FLOOR) ZERO
         BP    I23
         CL    R4,=F'2'            FLOOR = 2?
         BE    I24
         SR    R0,R0
         IC    R0,2(R7)            CALLDOWN(FLOOR) NE ZERO?
         LTR   R0,R0
         BZ    E7                  NO, REPEAT STEP E7
I24      XC    ORWORK,ORWORK
         OC    ORWORK,3(R7)
         OC    ORWORK,6(R7)
         OC    ORWORK,9(R7)
         OC    ORWORK,12(R7)
         OC    ORWORK,ORWORK
         BNZ   E7                  CALLS FOR HIGHER FLOORS
I23      LA    R0,14
         B     E2A                 WAIT 14 UNITS GOTO E2
E8A      BAL   R14,HOLDC
E8       EQU   *                   GO DOWN A FLOOR
         LA    R12,36
         L     R15,=A(PRINT)
         BAL   R14,SENTER
         S     R4,=F'1'
         LA    R0,61
         BAL   R14,HOLDC
         BAL   R14,CALLPTR
         SR    R0,R0
         ICM   R0,B'0011',1(R7)    CALLCAR(FLOOR) CALLDOWN(FLOOR) NE 0
         BP    I27
         CL    R4,=F'2'            FLOOR = 2?
         BE    I28
         SR    R0,R0
         IC    R0,0(R7)            CALLUP(FLOOR) NE ZERO?
         LTR   R0,R0
         BZ    E8                  NO, REPEAT E8
I28      XC    ORWORK,ORWORK
         S     R7,=F'3'
         OC    ORWORK,0(R7)
         S     R7,=F'3'
         OC    ORWORK,0(R7)
         S     R7,=F'3'
         OC    ORWORK,0(R7)
         S     R7,=F'3'
         OC    ORWORK,0(R7)
         OC    ORWORK,ORWORK
         BNZ   E8                  CALLS FOR LOWER FLOORS
I27      LA    R0,23
         B     E2A
E9       EQU   *                   SET INACTION INDICATOR
         LA    R12,40
         L     R15,=A(PRINT)
         BAL   R14,SENTER
         XC    IN,IN
         XC    LLINK1,LLINK1
         XC    RLINK1,RLINK1
         MVI   D2,X'00'
         BAL   R14,DECISION
         B     CYCLE
         TITLE 'DECISION'
DECISION EQU   *
         LTR   R5,R5               STATE = NEUTRAL ?
         BZ    Z1
         BR    R14                 YES RETURN
Z1       L     R9,ELEV1+16
         ICM   R9,B'1000',=F'0'
         S     R9,=A(E1)
         BNZ   Z2                  BRANCH IF NOT AT E1
         SR    R0,R0
         ICM   R0,B'0111',CALL+6   GET CALL VAR FLOOR 2
         LA    R3,E3               PREPARE TO SCHEDULE E3
         BNZ   Z3
Z2       SR    R1,R1
         LA    R5,CALL
Z5       ICM   R0,B'0111',0(R5)
         BNZ   Z4
Z8       LA    R5,3(R5)            NEXT CALL TABLE ENTRY
         LA    R1,1(R1)            R1 <- J
         CL    R1,=F'4'
         BNH   Z5
         LR    R0,R14              ALL CALL(J), J NE FLOOR, ARE ZERO
         ICM   R0,B'1000',=F'0'
         S     R0,=A(E6B)
         BZ    Z6
         SR    R5,R5
         BR    R14
Z6       LA    R1,2                R1 <- J
Z4       LR    R5,R1               R5 <- J
         SR    R5,R4               STATE <- J - FLOOR
         BNZ   Z7
         LTR   R0,R0
         BNZ   Z8                  J = FLOOR NOT ALLOWED
Z7       LTR   R9,R9
         BZ    Z9                  BRANCH IF E1
         BR    R14
Z9       LTR   R5,R5
         BNZ   Z10                 BRANCH IF J=2
         BR    R14
Z10      LA    R3,E6               SCHEDULE E6
Z3       LA    R0,20               WAIT 20 UNITS
         LR    R6,R12              SAVE R6
         LA    R6,ELEV1
         ST    R3,NEXTINST
         ST    R14,SAVER14         SAVE R14
         BAL   R14,HOLD
         LR    R6,R12              RESTORE R6
         L     R14,SAVER14         RESTORE R14
         BR    R14
         TITLE 'LITERALS'
         LTORG
         TITLE 'DATA DEFINITIONS'
         DS    0D
DBLWORD  DS    D
SAVER14  DS    F
LINECTR  DC    F'60'
AVAIL    DC    F'0'                LINK TO AVAILABLE NODES
TIME     DC    F'0'                CURRENT SIMULATED TIME
INTERTME DC    F'0'                TIME BEFORE NEXT MAN ENTERS SYSTEM
GIVEUPTM DC    F'0'                WAIT TIME BEFORE GIVEUP
TEMP     DC    F'0'
CNTR     DC    F'0'
         DC    4XL4'00'            PADDING FOR CALL TABLE
CALL     EQU   *
         DC    X'00'               CALLUP0, BUTTON FLOOR ZERO
         DC    X'00'               CALLCAR0, ELEV BUTTON, DEST FLOOR
         DC    X'00'               CALLDOWN0, DOWN BUTTON, FLOOR ZERO
*
         DC    3X'00'              CALLUP1, CALLCAR1, CALLDOWN1
         DC    3X'00'              CALLUP2, CALLCAR2, CALLDOWN2
         DC    3X'00'              CALLUP3, CALLCAR3, CALLDOWN3
         DC    3X'00'              CALLUP4, CALLCAR4, CALLDOWN4
*
         DC    4XL4'00'            PADDING FOR CALL TABLE
ORWORK   DC    XL3'00'
D1       DC    X'00'               1 -> DOOR OPEN,ACTIVE, PEOPLE IN/OUT
D2       DC    X'00'               0 -> SAT ON FLOOR 30 SEC OR MORE
D3       DC    X'00'               1 -> DOOR OPEN, INACTIVE
INFLOOR  DC    X'00'
OUTFLOOR DC    X'00'
PRINTSW  DC    X'01'
         EJECT
PAGEHEAD EQU   *
         DC    C'1'                SKIP TO NEW PAGE
         DC    C'TIME '
         DC    C'STATE '
         DC    C'FLOOR '
         DC    C'D1 '
         DC    C'D2 '
         DC    C'D3 '
         DC    C'STEP '
         DC    C'ACTION'
         DC    45C' '
HEADSZ   EQU   *-PAGEHEAD
*
DETAIL   EQU   *
         DC    C' '                PRINT SPACE1
PTIME    DS    CL4
         DC    CL3' '
PSTATE   DS    CL1
         DC    CL5' '
PFLOOR   DS    CL1
         DC    CL4' '
PD1      DS    CL1
         DC    CL2' '
PD2      DS    CL1
         DC    CL2' '
PD3      DS    CL1
         DC    CL2' '
PSTEP    DS    CL2
         DC    CL3' '
PMSG     DS    CL50
DETSZ    EQU   *-DETAIL
*
BLANKS   DC    83C' '
*
M1MSG    DC    CL50' '
         ORG   M1MSG
         DC    C'MAN NO. '
M1MAN    DS    CL2
         DC    C' ARRIVES AT FLOOR '
M1IN     DS    CL1
         DC    C', DESTINATION IS '
M1OUT    DS    CL1
         DC    C'.'
         ORG
M4MSG    DC    CL50' '
         ORG   M4MSG
         DC    C'MAN NO. '
M4MAN    DS    CL2
         DC    C' DECIDES TO GIVE UP AND HE LEAVES.'
         ORG
M5MSG    DC    CL50' '
         ORG   M5MSG
         DC    C'MAN NO. '
M5MAN    DS    CL2
         DC    C' GETS IN.'
         ORG
M6MSG    DC    CL50' '
         ORG   M6MSG
         DC    C'MAN NO. '
M6MAN    DS    CL2
         DC    C' GETS OUT, LEAVES THE SYSTEM.'
         ORG
E2MSG    DC    C'ELEVATOR STOPS'
*
E3MSG    DC    C'ELEVATOR DOORS START TO OPEN'
*
E4MSG    DC    C'DOORS OPEN, NOBODY IS THERE'
*
E5MSG2   DC    C'DOORS FLUTTER'
*
E5MSG1   DC    C'ELEVATOR DOORS START TO CLOSE'
*
E7MSG    DC    C'ELEVATOR MOVING UP'
*
E8MSG    DC    C'ELEVATOR MOVING DOWN'
*
E1MSG    DC    C'ELEVATOR DORMANT'
*
         TITLE 'LIST HEADS'
         DS    0F
WAIT     EQU   *                   LIST HEAD FOR WAIT LIST
         DC    A(MAN1)             LLINK1
         DC    A(MAN1)             RLINK1
         DC    3F'0'               NOT USED
         DC    F'0'                NEXTTIME = ZERO ALWAYS
         DC    F'0'                IN,OUT
*
QUEUE0   EQU   *                   LIST HEAD FOR QUEUE(0)
         DC    2F'0'               NOT USED
         DC    A(QUEUE0)           LLINK2
         DC    A(QUEUE0)           RLINK2
         DC    2F'0'               NOT USED
         DC    F'0'                IN,OUT
*
QUEUE1   EQU   *                   LIST HEAD FOR QUEUE(1)
         DC    2F'0'               NOT USED
         DC    A(QUEUE1)           LLINK2
         DC    A(QUEUE1)           RLINK2
         DC    3F'0'
*
QUEUE2   EQU   *                   LIST HEAD FOR QUEUE(2)
         DC    2F'0'               NOT USED
         DC    A(QUEUE2)           LLINK2
         DC    A(QUEUE2)           RLINK2
         DC    3F'0'
*
QUEUE3   EQU   *                   LIST HEAD FOR QUEUE(3)
         DC    2F'0'               NOT USED
         DC    A(QUEUE3)           LLINK2
         DC    A(QUEUE3)           RLINK2
         DC    3F'0'
*
QUEUE4   EQU   *                   LIST HEAD FOR QUEUE(4)
         DC    2F'0'               NOT USED
         DC    A(QUEUE4)           LLINK2
         DC    A(QUEUE4)           RLINK2
         DC    3F'0'
*
ELEVATOR EQU   *                   LIST HEAD FOR ELEVATOR
         DC    2F'0'               NOT USED
         DC    A(ELEVATOR)         LLINK2
         DC    A(ELEVATOR)         RLINK2
         DC    2F'0'               NOT USED
         DC    F'0'                IN,OUT
         TITLE 'FOUR PERMANENT NODES, ALWAYS PRESENT IN SYSTEM'
*---------------------------------------------------------------------*
* MAN1: INITIALLY THE SOLE ENTRY ON THE WAIT LIST                     *
*       ALWAYS POSITIONED AT STEP M1 READY TO ENTER A NEW MAN INTO THE*
*       SYSTEM                                                        *
*---------------------------------------------------------------------*
MAN1     EQU   *
         DC    A(WAIT)             LLINK1
         DC    A(WAIT)             RLINK1
         DC    2F'0'               LLINK2, RLINK2
         DC    A(M1)               NEXTINST = M1
         DC    F'0'                NEXTTIME
         DC    F'0'                IN,OUT
*---------------------------------------------------------------------*
* ELEV1: GOVERNS MAIN ACTIONS OF ELEVATOR AT STEPS E1,E2,E3,E4,E6,E7, *
*                                                  E8                 *
*        I.E. ALL ELEVATOR ACTIONS EXCEPT E5,E9                       *
*---------------------------------------------------------------------*
ELEV1    EQU   *
         DC    4F'0'
         DC    A(E1)               NEXTINST = E1
         DC    2F'0'
*---------------------------------------------------------------------*
* ELEV2: REPRESENTS INDEPENDENT ELEVATOR ACTION E5 (CLOSE DOOR)       *
*        TAKE PLACE INDEPENDENTLY OF OTHER ELEVATOR ACTIONS WITH      *
*        RESPECT TO SIMULATED TIME                                    *
*---------------------------------------------------------------------*
ELEV2    EQU   *
         DC    4F'0'
         DC    A(E5)               NEXTINST = E5
         DC    2F'0'
*---------------------------------------------------------------------*
* ELEV3: REPRESENTS INDEPENDENT ELEVATOR ACTION E9 (SET INACTION      *
*        INDICATOR). TAKES PLACE INDEPENDENTLY OF OTHER ELEVATOR      *
*        ACTIONS WITH RESPECT TO SIMULATED TIME                       *
*---------------------------------------------------------------------*
ELEV3    EQU   *
         DC    4F'0'
         DC    A(E9)               NEXTINST = E9
         DC    2F'0'
*
PRINTER  DCB   DSORG=PS,RECFM=FB,BLKSIZE=27971,LRECL=83,               X
               DDNAME=PRINTER,MACRF=PM
POOLMAX  DC    A(POOLMAX+4)
         DC    2000XL4'00'         STORAGE POOL
         DS    0F
         TITLE 'DSECTS'
NODE     DSECT
LLINK1   DS    F                   WAIT LIST LINK
RLINK1   DS    F                   WAIT LIST LINK
LLINK2   DS    F                   QUEUE OR ELEVATOR LIST LINK
RLINK2   DS    F                   QUEUE OR ELEVATOR LIST LINK
NEXTINST DS    F                   BRANCH INST TO PROPER ACTION
NEXTTIME DS    F
IN       DS    CL1
OUT      DS    CL1
MANBR    DS    CL1
         DS    CL1
NODESIZE EQU   *-NODE
ELEVA    CSECT
         TITLE 'REMOTE AREAS'
SAVE     DS    90D
SAVEND   EQU   *
         TITLE 'VALUES'
VALUES   B     14(0,R9)
         USING VALUES,R9
         DC    AL1(8),CL9'VALUES'
         L     R1,CNTR
         LA    R1,1(R1)
         ST    R1,CNTR
         CL    R1,=F'1'
         BNE   VAL2
         MVI   INFLOOR,X'00'
         MVI   OUTFLOOR,X'02'
         MVC   INTERTME,=F'0038'
         MVC   GIVEUPTM,=F'0152'
         B     SEXIT
VAL2     CL    R1,=F'2'
         BNE   VAL3
         MVI   INFLOOR,X'04'
         MVI   OUTFLOOR,X'01'
         MVC   INTERTME,=F'0098'
         MVC   GIVEUPTM,=F'0500'
         B     SEXIT
VAL3     CL    R1,=F'3'
         BNE   VAL4
         MVI   INFLOOR,X'02'
         MVI   OUTFLOOR,X'01'
         MVC   INTERTME,=F'0005'
         MVC   GIVEUPTM,=F'0800'
         B     SEXIT
VAL4     CL    R1,=F'4'
         BNE   VAL5
         MVI   INFLOOR,X'02'
         MVI   OUTFLOOR,X'01'
         MVC   INTERTME,=F'0150'
         MVC   GIVEUPTM,=F'0800'
         B     SEXIT
VAL5     CL    R1,=F'5'
         BNE   VAL6
         MVI   INFLOOR,X'03'
         MVI   OUTFLOOR,X'01'
         MVC   INTERTME,=F'0073'
         MVC   GIVEUPTM,=F'0450'
         B     SEXIT
VAL6     CL    R1,=F'6'
         BNE   VAL7
         MVI   INFLOOR,X'02'
         MVI   OUTFLOOR,X'01'
         MVC   INTERTME,=F'0238'
         MVC   GIVEUPTM,=F'0176'
         B     SEXIT
VAL7     CL    R1,=F'7'
         BNE   VAL8
         MVI   INFLOOR,X'01'
         MVI   OUTFLOOR,X'02'
         MVC   INTERTME,=F'0225'
         MVC   GIVEUPTM,=F'0600'
         B     SEXIT
VAL8     CL    R1,=F'8'
         BNE   VAL9
         MVI   INFLOOR,X'01'
         MVI   OUTFLOOR,X'00'
         MVC   INTERTME,=F'0049'
         MVC   GIVEUPTM,=F'0400'
         B     SEXIT
VAL9     CL    R1,=F'9'
         BNE   VAL10
         MVI   INFLOOR,X'01'
         MVI   OUTFLOOR,X'03'
         MVC   INTERTME,=F'0172'
         MVC   GIVEUPTM,=F'0400'
         B     SEXIT
VAL10    CL    R1,=F'10'
         BNE   VAL11
         MVI   INFLOOR,X'02'
         MVI   OUTFLOOR,X'04'
         MVC   INTERTME,=F'3336'
         MVC   GIVEUPTM,=F'0400'
         B     SEXIT
VAL11    CL    R1,=F'11'
         BNE   VALEND
         MVI   INFLOOR,X'02'
         MVI   OUTFLOOR,X'03'
         MVC   INTERTME,=F'0456'
         MVC   GIVEUPTM,=F'0050'
         B     SEXIT
VALEND   L     R13,4(R13)
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         OI    15(R13),X'01'
         B     XIT                 END SIMULATION
*
         LTORG
         DROP  R9
         TITLE 'PRINT'
PRINT    B     14(0,R9)
         USING PRINT,R9
         DC    AL1(8),CL9'PRINT'
         MVI   PMSG,X'40'
         MVC   PMSG+1(49),PMSG     CLEAR PMSG
         L     R1,LINECTR
         LA    R1,1(R1)
         ST    R1,LINECTR
         CL    R1,=F'52'           PAGE BREAK?
         BL    PRINT1              NO
         LA    R1,3
         ST    R1,LINECTR          RESET LINE COUNT
         PUT   PRINTER,PAGEHEAD    PRINT HEADING
         PUT   PRINTER,BLANKS
PRINT1   L     R2,TIME
         CVD   R2,DBLWORD
         OI    DBLWORD+7,X'0F'
         UNPK  PTIME,DBLWORD+5(3)
         LTR   R5,R5
         BZ    PRINT2              NEUTRAL
         BL    PRINT3              GOINGDOWN
         MVI   PSTATE,C'U'         GOINGUP
         B     PRINT4
PRINT2   MVI   PSTATE,C'N'
         B     PRINT4
PRINT3   MVI   PSTATE,C'D'
PRINT4   MVI   PD1,X'F0'
         MVI   PD2,X'F0'
         MVI   PD3,X'F0'
         CLI   D1,X'00'
         BE    PRINT5
         MVI   PD1,C'X'
PRINT5   CLI   D2,X'00'
         BE    PRINT6
         MVI   PD2,C'X'
PRINT6   CLI   D3,X'00'
         BE    PRINT7
         MVI   PD3,C'X'
PRINT7   STC   R4,PFLOOR
         OI    PFLOOR,X'F0'
         LR    R15,R12
         B     *+4(R15)
         B     PM1
         B     PM4
         B     PM5
         B     PM6
         B     PE2
         B     PE3
         B     PE4
         B     PE5
         B     PE7
         B     PE8
         B     PE1
*
PM1      L     R15,=A(CVMAN)
         BAL   R14,SENTER
         UNPK  M1MAN,DBLWORD+6(2)
         MVC   M1IN,IN
         OI    M1IN,X'F0'
         MVC   M1OUT,OUT
         OI    M1OUT,X'F0'
         MVC   PSTEP,=C'M1'
         MVC   PMSG,M1MSG
         B     PRINT8
PM4      L     R15,=A(CVMAN)
         BAL   R14,SENTER
         UNPK  M4MAN,DBLWORD+6(2)
         MVC   PSTEP,=C'M4'
         MVC   PMSG,M4MSG
         B     PRINT8
PM5      L     R15,=A(CVMAN)
         BAL   R14,SENTER
         UNPK  M5MAN,DBLWORD+6(2)
         MVC   PSTEP,=C'M5'
         MVC   PMSG,M5MSG
         B     PRINT8
PM6      L     R15,=A(CVMAN)
         BAL   R14,SENTER
         UNPK  M6MAN,DBLWORD+6(2)
         MVC   PSTEP,=C'M6'
         MVC   PMSG,M6MSG
         B     PRINT8
PE2      MVC   PMSG(L'E2MSG),E2MSG
         MVC   PSTEP,=C'E2'
         B     PRINT8
PE3      MVC   PMSG(L'E3MSG),E3MSG
         MVC   PSTEP,=C'E3'
         B     PRINT8
PE4      MVC   PMSG(L'E4MSG),E4MSG
         MVC   PSTEP,=C'E4'
         B     PRINT8
PE5      MVC   PMSG(L'E5MSG1),E5MSG1
         MVC   PSTEP,=C'E5'
         CLI   D1,X'01'
         BNE   PRINT8
         MVI   PMSG,X'40'
         MVC   PMSG+1(49),PMSG
         MVC   PMSG(L'E5MSG2),E5MSG2
         B     PRINT8
PE7      MVC   PMSG(L'E7MSG),E7MSG
         MVC   PSTEP,=C'E7'
         B     PRINT8
PE8      MVC   PMSG(L'E8MSG),E8MSG
         MVC   PSTEP,=C'E8'
         B     PRINT8
PE1      MVC   PMSG(L'E1MSG),E1MSG
         MVC   PSTEP,=C'E1'
         B     PRINT8
PRINT8   EQU   *
         PUT   PRINTER,DETAIL
         B     SEXIT
         DROP  R9
         TITLE 'CVMAN'
CVMAN    B     14(0,R9)
         USING CVMAN,R9
         DC    AL1(8),CL9'CVMAN'
         SR    R2,R2
         IC    R2,MANBR
         CVD   R2,DBLWORD
         OI    DBLWORD+7,X'0F'
         B     SEXIT
         LTORG
         DROP  R9
         END   ELEV
//G.PRINTER  DD SYSOUT=*
//G.SYSOUT   DD SYSOUT=*
//G.SYSUDUMP DD SYSOUT=*
