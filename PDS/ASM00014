//JOBNAME JOB (ACCT,'ROOM-NBR'),'HOTTEL COMPSORT',MSGCLASS=S,CLASS=K,
//  TIME=(,30)
//PROCLIB JCLLIB ORDER=USERID.DVL.PROC
//        SET TITLE1='XXX.ASM00014'
//OUTPUT INCLUDE MEMBER=DESTCH
//*-------------------------------------------------------------------*
//*        DISPLAY SYSTEM INFO                                        *
//*-------------------------------------------------------------------*
//STEP1    EXEC PGM=COBSYS
//STEPLIB  DD  DSN=PREFIX.DVL.BATLOAD,DISP=SHR
//SYSOUT   DD  SYSOUT=*
//*-------------------------------------------------------------------*
//*        ASSEMBLY                                                   *
//*-------------------------------------------------------------------*
//STEP02   EXEC HLASMCLG
//C.SYSLIB DD DSN=USERID.MACLIB,DISP=SHR
//         DD DSN=SYS1.MACLIB,DISP=SHR
//C.SYSUT2 DD DSN=&&SYSUT2,UNIT=SYSDA,
//           SPACE=(1700,(600,100))
//C.SYSPUNCH DD DUMMY
//C.SYSIN DD *
         TITLE 'COMPARISON COUNTING SORT'
         PRINT NOGEN
*---------------------------------------------------------------------*
*        18 FEB 1983 - CHARLES HOTTEL                                 *
*        COMPARISON COUNTING SORT                                     *
*                                                                     *
*        THE ART OF COMPUTER PROGRAMMING, SORTING AND SEARCHING,      *
*        2ND EDITION. PAGES 76-78.                                    *
*                                                                     *
*        SORTS R(1), ... ,R(N) ON KEYS K(1), ... ,K(N) BY MAINTAINING *
*        AN AUXILLARY TABLE COUNT(1), ... ,COUNT(N) TO COUNT THE      *
*        NUMBER OF KEYS LESS THAN A GIVEN KEY.  AT THE CONCLUSION     *
*        COUNT(J) + 1 SPECIFIES THE FINAL POSITION OF R(J).           *
*                                                                     *
*        NO MOVEMENT OF RECORDS, STABLE, NOT EFFICIENT WHEN LARGE     *
*        NUMBER OF RECORDS.                                           *
*---------------------------------------------------------------------*
*        22 AUG 2002 - CHARLES HOTTEL                                 *
*                                                                     *
*        UPDATED JCL TO RUN COBSYS COBOL PROGRAM WHICH DISPLAYS       *
*        SYSTEM INFORMATION. COBSYS WAS WRITTEN BY GILBERT ST. FLOUR. *
*                                                                     *
*        CHANGED TIMING ROUTINES TO DISPLAY TIMES IN MICROSECONDS     *
*        TIMING ROUTINE IS FROM RICK HEVENER'S ARTCILE "LARGE SYSTEM  *
*        INSTRUCTION TIMINGS", TECHNICAL SUPPORT AUGUST 1997.         *
*---------------------------------------------------------------------*
COMPSORT START
         STM   R14,R12,12(R13)
         BALR  R15,0
         USING *,R15
         L     R1,MAIN-16
         ST    R13,4(R1)
         ST    R1,8(R13)
         LR    R13,R1
         LM    R10,R12,MAIN-12
         DROP  R15
         USING MAIN,R10,R11,R12
         B     MAIN
         DC    A(SAVE,MAIN,MAIN+4096,MAIN+8192)
*---------------------------------------------------------------------*
*   MAIN LINE CODE                                                    *
*---------------------------------------------------------------------*
MAIN     EQU   *
         OPEN  (OUTFILE,OUTPUT)
         STIMER TASK,BINTVL=LONGTIME
         CPUTIMER MIC,BGNTIME
         L     R15,=A(SORTRTN)
         BAL   R14,SENTER          SORT
         CPUTIMER MIC,ENDTIME
         L     R15,=A(CALCTIME)
         BAL   R14,SENTER          CALCULATE MICROSECONDS
         L     R15,=A(PRTRTN)
         BAL   R14,SENTER          PRINT SORTED VALUES
         CLOSE (OUTFILE)
MAIN99   SR    R15,R15
         B     SEXIT
         TITLE 'COMMON SUBROUTINE ENTRY/EXIT'
*
*   COMMON SUBROUTINE ENTRY
*
SENTER   STM   R14,R12,12(R13)
         C     R13,=A(SAVEND)
         BL    SENTER1
         DC    H'0'
         DC    C'SAVE AREA OVERFLOW'
SENTER1  LR    R9,R15
         LA    R15,72(R13)
         ST    R15,8(R13)
         ST    R13,4(R15)
         LR    R13,R15
         BR    R9
*
*   COMMON SUBROUTINE EXIT
*
SEXIT    L     R13,4(R13)
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         OI    15(R13),X'01'
         BR    R14
         TITLE 'REGISTER EQUATES AND USAGE'
*
*   REGISTER EQUATES
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9   SENTER BRANCH TO SUBROUTINE, SUBROUTINE USES AS BASE
R10      EQU   10  BASE REGISTER FOR MAIN
R11      EQU   11  BASE REGISTER FOR MAIN
R12      EQU   12  BASE REGISTER FOR MAIN
R13      EQU   13  SAVE AREA ADDRESS
R14      EQU   14  SEXIT RETURN ADDRESS
R15      EQU   15  BRANCH TO ADDRESS, SENTER COPIES TO R9
*                  RETURN CODE FROM SUBROUTINE
         TITLE 'LITERALS'
         LTORG
         TITLE 'MAIN ROUTINE DATA'
OUTFILE  DCB   DSORG=PS,                                               X
               RECFM=FBA,                                              X
               MACRF=PM,                                               X
               BLKSIZE=27930,                                          X
               LRECL=133,                                              X
               DDNAME=PRTOUT
         DS    0D
DBLWORD  DS    D
BGNTIME  DS    D                   BEGIN TIME
ENDTIME  DS    D                   END TIME
LONGTIME DC    F'2E9'
COUNTS   DC    16F'0'
LASTCNT  EQU   *-4
SW       DC    X'00'
*
TIMEREC  DS    0CL133
         DC    C'1'
         DC    CL15'ELAPSED TIME = '
MSGHOLD  DS    CL15
         DC    CL14' MICROSECONDS.'
         DC    CL88' '
*
OUTREC   DS    0CL133
         DC    C' '
OUTKEY   DS    CL3
         DC    CL129' '
*
UNSORTED EQU   *
         DC    CL3'503'
         DC    CL3'087'
         DC    CL3'512'
         DC    CL3'061'
         DC    CL3'908'
         DC    CL3'170'
         DC    CL3'897'
         DC    CL3'275'
         DC    CL3'653'
         DC    CL3'426'
         DC    CL3'154'
         DC    CL3'509'
         DC    CL3'612'
         DC    CL3'677'
         DC    CL3'765'
         DC    CL3'703'
LASTUN   EQU   *
*
SORTED   DS    16CL3
COMPSRT  CSECT
*
*   REMOTE AREAS
*
SAVE     DS    90D
SAVEND   EQU   *
         TITLE 'COMPARISON COUNTING SORT'
SORTRTN  B     14(0,R9)
         USING SORTRTN,R9
         DC    AL1(8),CL9'SORTRTN'
*---------------------------------------------------------------------*
* FOR I = 1, ... ,N                                                   *
*   COUNT(I) <- ZERO                                                  *
* ENDFOR                                                              *
* FOR I = 2, ... ,N                                                   *
*   COUNT(I) <- I-1                                                   *
*   FOR J = 1, ... , I-1                                              *
*     IF K(I) < K(J)                                                  *
*       COUNT(J) <- COUNT(J) + 1                                      *
*       COUNT(I) <- COUNT(I) - 1                                      *
*     ENDIF                                                           *
*   ENDFOR                                                            *
* ENDFOR                                                              *
*---------------------------------------------------------------------*
         LA    R1,1                I-1
         LA    R2,COUNTS+4         COUNT(I)
         LA    R3,UNSORTED+3       K(I)
LOOPI    LA    R4,COUNTS           COUNT(J)
         LA    R5,UNSORTED         K(J)
         LR    R6,R1               COUNT(I) <- I-1
LOOPJ    CLC   0(3,R3),0(R5)       K(I) < K(J) ?
         BNL   NEXTJ               NO
         L     R7,0(R4)            YES, GET COUNT(J)
         LA    R7,1(R7)            COUNT(J) <- COUNT(J) + 1
         ST    R7,0(R4)            SAVE NEW COUNT(J)
         BCTR  R6,0                COUNT(I) <- COUNT(I) - 1
NEXTJ    LA    R4,4(R4)            NEXT COUNT(J)
         LA    R5,3(R5)            NEXT K(J)
         CR    R5,R3               DONE?
         BL    LOOPJ               BRANCH IF NOT DONE
         ST    R6,0(R2)            SAVE NEW COUNT(I)
         LA    R1,1(R1)            NEXT I-1
         LA    R2,4(R2)            NEXT COUNT(I)
         LA    R3,3(R3)            NEXT K(I)
         CL    R2,=A(LASTCNT)      DONE?
         BNH   LOOPI               BRANCH IF NOT DONE
         B     SEXIT
         LTORG
         TITLE 'CALCTIME'
CALCTIME B     14(0,R9)
         USING CALCTIME,R9
         DC    AL1(8),CL9'CALCTIME'
*---------------------------------------------------------------------*
* COMPUTE ELAPSED TIME                                                *
*---------------------------------------------------------------------*
         LM    R2,R3,BGNTIME       GET BEGIN TIME
         SL    R3,ENDTIME+4
         BC    3,CALC1
         BCTR  R2,0                BORROW
CALC1    SL    R2,ENDTIME          R2 <- ELAPSED TIME
*---------------------------------------------------------------------*
* MAKE R4 & R3 LESS THAN 2**31                                        *
* GOING INTO CALC2 THERE ARE TWO CASES:                               *
*  1. R2 IS ALREADY ZERO AND THE SLDL R2,2 BEFORE THE LOOP IS REVERSED*
*     BY THE SRDL R2,1 WITHIN THE LOOP AND BY THE SRDL R2,1           *
*     FOLLOWING THE LOOP.                                             *
*  2. R2 IS GREATER THAN ZERO. THE LOOP KEEPS SHIFTING RIGHT UNTIL R2 *
*     IS ZERO. THE SRDL R2,1 AFTER THE LOOP MAKES SURE THAT THE       *
*     LEFTMOST BIT OF R3 IS ZERO. THE VALUE IN R3 IS OVERSHIFTED TO   *
*     THE RIGHT.  SOME BITS MAY HAVE DROPPED OFF THE RIGHT END OF R3  *
*     BUT THEY ARE VERY SMALL FRACTIONS OF A MICROSECOND. THE         *
*     MULTIPLY GIVES MICROSECONDS OVERSHIFTED TO THE RIGHT. THE       *
*     SLDL R2,0(R5) EVENS OUT THE SHIFTING, GIVING MICROSECONDS.      *
*---------------------------------------------------------------------*
         LA    R6,1
         LNR   R5,R6               NBR OF SHIFTS = -1 (SET UP LOOP)
         SLDL  R2,2                RECOVER ONE IN LOOP, ONE AFTER
CALC2    AR    R5,R6               # = # + 1
         SRDL  R2,1                RECOVER 1
         LTR   R2,R2
         BNZ   CALC2
         SRDL  R2,1                NOW R2 & R3 LESS THAN 2**31
*********M     R2,=F'1E6'          CONVERT MICROSEC TO PICOSEC
*********SLDL  R2,0(R5)            RESTORE SHIFTS, BIT 51 = 1 PICOSEC
*********SRDL  R2,12               BIT 63 = 1 PICOSEC
         SLDL  R2,0(R5)            RESTORE SHIFTS, BIT 51 = 1 MICROSEC
         SRDL  R2,12               BIT 63 = 1 MICROSEC
*---------------------------------------------------------------------*
* DISPLAY RESULTS                                                     *
*---------------------------------------------------------------------*
         CVD   R3,DBLWORD
         UNPK  MSGHOLD,DBLWORD
         OI    MSGHOLD+14,X'F0'
         PUT   OUTFILE,TIMEREC
         B     SEXIT
         LTORG
         TITLE 'PRTRTN'
PRTRTN   B     14(0,R9)
         USING PRTRTN,R9
         DC    AL1(8),CL9'PRTRTN'
         LA    R1,UNSORTED
         LA    R2,COUNTS
         LA    R3,16               NUMBER OF RECORDS
PRTLOOP1 L     R5,0(R2)            GET COUNT(J)
         M     R4,=F'3'            CALC DISP INTO SORTED
         A     R5,=A(SORTED)
         MVC   0(3,R5),0(R1)       PLACE REC IN SORTED SLOT
         LA    R1,3(R1)            NEXT REC
         LA    R2,4(R2)            NEXT COUNT
         BCT   R3,PRTLOOP1         BRANCH IF MORE RECS
         LA    R2,16               NUMBER OF RECORDS
         LA    R3,SORTED
         LA    R4,56               NUMBER OF RECS PER PAGE
         LA    R5,57               COUNT RECS OUTPUT
PRTLOOP2 MVC   OUTKEY,0(R3)        PLACE IN OUTPUT REC
         LA    R5,1(R5)            COUNT REC
         CR    R5,R4
         BH    NEWPAGE             MORE THAN 56
         PUT   OUTFILE,OUTREC      LESS THAN 56
         B     PRTST
NEWPAGE  MVI   OUTREC,C'1'         NEW PAGE
         PUT   OUTFILE,OUTREC
         MVI   OUTREC,C' '         SINGLE SPACE
         SR    R5,R5
PRTST    LA    R3,3(R3)            NEXT SORTED REC
         BCT   R2,PRTLOOP2         BRANCH IF MORE RECS
         B     SEXIT
         LTORG
         END
//G.PRTOUT   DD SYSOUT=*
//G.SYSOUT   DD SYSOUT=*
//G.SYSUDUMP DD SYSOUT=*
