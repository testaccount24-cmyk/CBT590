//JOBNAME JOB (ACCT,'ROOM-NBR'),'HOTTEL QSEQSRCH ',MSGCLASS=S,CLASS=K,
//  TIME=(,30)
//PROCLIB JCLLIB ORDER=USERID.DVL.PROC
//        SET TITLE1='XXX.ASM00052'
//OUTPUT INCLUDE MEMBER=DESTCH
//*-------------------------------------------------------------------*
//*        DISPLAY SYSTEM INFO                                        *
//*-------------------------------------------------------------------*
//STEP1    EXEC PGM=COBSYS
//STEPLIB  DD  DSN=PREFIX.DVL.BATLOAD,DISP=SHR
//SYSOUT   DD  SYSOUT=*
//*-------------------------------------------------------------------*
//*        ASSEMBLY                                                   *
//*-------------------------------------------------------------------*
//STEP02   EXEC HLASMCLG
//C.SYSLIB DD DSN=USERID.MACLIB,DISP=SHR
//         DD DSN=SYS1.MACLIB,DISP=SHR
//C.SYSUT2 DD DSN=&&SYSUT2,UNIT=SYSDA,
//           SPACE=(1700,(600,100))
//C.SYSPUNCH DD DUMMY
//C.SYSIN DD *
         TITLE 'QUICK SEQUENTIAL SEARCH'
         PRINT NOGEN
*---------------------------------------------------------------------*
*        17 OCT 1983 - CHARLES HOTTEL                                 *
*        QUICK SEQUENTIAL SEARCH                                      *
*                                                                     *
*        THE ART OF COMPUTER PROGRAMMING, SORTING AND SEARCHING,      *
*        2ND EDITION. PAGE 395                                        *
*---------------------------------------------------------------------*
*        05 SEP 2002 - CHARLES HOTTEL                                 *
*                                                                     *
*        UPDATED JCL TO RUN COBSYS COBOL PROGRAM WHICH DISPLAYS       *
*        SYSTEM INFORMATION. COBSYS WAS WRITTEN BY GILBERT ST. FLOUR. *
*                                                                     *
*        CHANGED TIMING ROUTINES TO DISPLAY TIMES IN MICROSECONDS     *
*        TIMING ROUTINE IS FROM RICK HEVENER'S ARTCILE "LARGE SYSTEM  *
*        INSTRUCTION TIMINGS", TECHNICAL SUPPORT AUGUST 1997.         *
*---------------------------------------------------------------------*
QSEQSRCH START
         STM   R14,R12,12(R13)
         BALR  R15,0
         USING *,R15
         L     R1,MAIN-16
         ST    R13,4(R1)
         ST    R1,8(R13)
         LR    R13,R1
         LM    R10,R12,MAIN-12
         DROP  R15
         USING MAIN,R10,R11,R12
         B     MAIN
         DC    A(SAVE,MAIN,MAIN+4096,MAIN+8192)
*---------------------------------------------------------------------*
*   MAIN LINE CODE                                                    *
*---------------------------------------------------------------------*
MAIN     EQU   *
         OPEN  (OUTFILE,OUTPUT)
         STIMER TASK,BINTVL=LONGTIME
         LA    R8,SRCHTBL          POINT TO SEARCH TABLE
         LA    R7,TIMETBL          POINT TO TIME TABLE
         LA    R6,16
MAINLOOP MVC   KEY,0(R8)           GET KEY FOR SEARCH
         CPUTIMER MIC,BGNTIME
         L     R15,=A(SEARCH)
         BAL   R14,SENTER          SORT
         CPUTIMER MIC,ENDTIME
         L     R15,=A(CALCTIME)
         BAL   R14,SENTER          CALCULATE MICROSECONDS
         CLC   0(4,R7),MAXTIME     TIME > MAXTIME?
         BNH   MAIN03              NO
         MVC   MAXTIME,0(R7)       SAVE MAXTIME
MAIN03   LA    R8,3(R8)            NEXT KEY FOR SEARCH
         LA    R7,4(R7)            POINT NEXT SLOT IN TIME TABLE
         BCT   R6,MAINLOOP
         L     R15,=A(PRTRTN)
         BAL   R14,SENTER          PRINT RESULTS
         CLOSE (OUTFILE)
MAIN99   SR    R15,R15
         B     SEXIT
         TITLE 'COMMON SUBROUTINE ENTRY/EXIT'
*
*   COMMON SUBROUTINE ENTRY
*
SENTER   STM   R14,R12,12(R13)
         C     R13,=A(SAVEND)
         BL    SENTER1
         DC    H'0'
         DC    C'SAVE AREA OVERFLOW'
SENTER1  LR    R9,R15
         LA    R15,72(R13)
         ST    R15,8(R13)
         ST    R13,4(R15)
         LR    R13,R15
         BR    R9
*
*   COMMON SUBROUTINE EXIT
*
SEXIT    L     R13,4(R13)
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         OI    15(R13),X'01'
         BR    R14
         TITLE 'REGISTER EQUATES AND USAGE'
*
*   REGISTER EQUATES
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9   SENTER BRANCH TO SUBROUTINE, SUBROUTINE USES AS BASE
R10      EQU   10  BASE REGISTER FOR MAIN
R11      EQU   11  BASE REGISTER FOR MAIN
R12      EQU   12  BASE REGISTER FOR MAIN
R13      EQU   13  SAVE AREA ADDRESS
R14      EQU   14  SEXIT RETURN ADDRESS
R15      EQU   15  BRANCH TO ADDRESS, SENTER COPIES TO R9
*                  RETURN CODE FROM SUBROUTINE
         TITLE 'LITERALS'
         LTORG
         TITLE 'MAIN ROUTINE DATA'
         EJECT
OUTFILE  DCB   DSORG=PS,                                               X
               RECFM=FBA,                                              X
               MACRF=PM,                                               X
               BLKSIZE=27930,                                          X
               LRECL=133,                                              X
               DDNAME=PRTOUT
         DS    0D
DBLWORD  DS    D
BGNTIME  DS    D                   BEGIN TIME
ENDTIME  DS    D                   END TIME
LONGTIME DC    F'2E9'
MAXTIME  DC    F'0'
TIMETBL  DC    16F'0'              SEARCH TIMES
KEY      DS    CL3
*
TIMEREC  DS    0CL133
         DC    C'1'
MSGLABEL DC    CL15'AVERAGE TIME = '
MSGHOLD  DS    CL15
         DC    CL14' MICROSECONDS.'
         DC    CL88' '
*
SRCHTBL  DC    CL3'061'
         DC    CL3'087'
         DC    CL3'154'
         DC    CL3'170'
         DC    CL3'275'
         DC    CL3'426'
         DC    CL3'503'
         DC    CL3'509'
         DC    CL3'512'
         DC    CL3'612'
         DC    CL3'653'
         DC    CL3'677'
         DC    CL3'703'
         DC    CL3'765'
         DC    CL3'897'
         DC    CL3'908'
LASTUN   EQU   *-3
DUMMY    DC    X'FFFFFF'
*
SEQSRCH1 CSECT
*
*   REMOTE AREAS
*
SAVE     DS    90D
SAVEND   EQU   *
         TITLE 'QUICK SEQUENTIAL SEARCH'
SEARCH   B     14(0,R9)
         USING SEARCH,R9
         DC    AL1(8),CL9'SEARCH'
         MVC   DUMMY,KEY
         LA    R2,SRCHTBL-3
LOOP1    LA    R2,3(R2)
         CLC   KEY,0(R2)
         BNE   LOOP1
         CL    R2,=A(DUMMY)
         BNE   SUCCESS
FAIL     EQU   *
SUCCESS  EQU   *
         B     SEXIT
         LTORG
         TITLE 'CALCTIME'
CALCTIME B     14(0,R9)
         USING CALCTIME,R9
         DC    AL1(8),CL9'CALCTIME'
*---------------------------------------------------------------------*
* COMPUTE ELAPSED TIME                                                *
*---------------------------------------------------------------------*
         LM    R2,R3,BGNTIME       GET BEGIN TIME
         SL    R3,ENDTIME+4
         BC    3,CALC1
         BCTR  R2,0                BORROW
CALC1    SL    R2,ENDTIME          R2 <- ELAPSED TIME
*---------------------------------------------------------------------*
* MAKE R4 & R3 LESS THAN 2**31                                        *
* GOING INTO CALC2 THERE ARE TWO CASES:                               *
*  1. R2 IS ALREADY ZERO AND THE SLDL R2,2 BEFORE THE LOOP IS REVERSED*
*     BY THE SRDL R2,1 WITHIN THE LOOP AND BY THE SRDL R2,1           *
*     FOLLOWING THE LOOP.                                             *
*  2. R2 IS GREATER THAN ZERO. THE LOOP KEEPS SHIFTING RIGHT UNTIL R2 *
*     IS ZERO. THE SRDL R2,1 AFTER THE LOOP MAKES SURE THAT THE       *
*     LEFTMOST BIT OF R3 IS ZERO. THE VALUE IN R3 IS OVERSHIFTED TO   *
*     THE RIGHT.  SOME BITS MAY HAVE DROPPED OFF THE RIGHT END OF R3  *
*     BUT THEY ARE VERY SMALL FRACTIONS OF A MICROSECOND. THE         *
*     MULTIPLY GIVES MICROSECONDS OVERSHIFTED TO THE RIGHT. THE       *
*     SLDL R2,0(R5) EVENS OUT THE SHIFTING, GIVING MICROSECONDS.      *
*---------------------------------------------------------------------*
         LA    R6,1
         LNR   R5,R6               NBR OF SHIFTS = -1 (SET UP LOOP)
         SLDL  R2,2                RECOVER ONE IN LOOP, ONE AFTER
CALC2    AR    R5,R6               # = # + 1
         SRDL  R2,1                RECOVER 1
         LTR   R2,R2
         BNZ   CALC2
         SRDL  R2,1                NOW R2 & R3 LESS THAN 2**31
*********M     R2,=F'1E6'          CONVERT MICROSEC TO PICOSEC
*********SLDL  R2,0(R5)            RESTORE SHIFTS, BIT 51 = 1 PICOSEC
*********SRDL  R2,12               BIT 63 = 1 PICOSEC
         SLDL  R2,0(R5)            RESTORE SHIFTS, BIT 51 = 1 MICROSEC
         SRDL  R2,12               BIT 63 = 1 MICROSEC
         ST    R3,0(R7)            SAVE TIME IN TABLE
         B     SEXIT
         LTORG
         TITLE 'PRTRTN'
PRTRTN   B     14(0,R9)
         USING PRTRTN,R9
         DC    AL1(8),CL9'PRTRTN'
         SR    R4,R4
         SR    R5,R5
         LA    R3,TIMETBL
         LA    R2,16
LOOPB    A     R5,0(R3)            ADD TIME
         LA    R3,4(R3)
         BCT   R2,LOOPB
         D     R4,=F'16'           AVG TIME IN R5
         CVD   R5,DBLWORD
         UNPK  MSGHOLD,DBLWORD
         OI    MSGHOLD+14,X'F0'
         PUT   OUTFILE,TIMEREC
         MVI   TIMEREC,C'0'
         MVC   MSGLABEL,=C'MAXIMUM TIME ='
         L     R5,MAXTIME
         CVD   R5,DBLWORD
         UNPK  MSGHOLD,DBLWORD
         OI    MSGHOLD+14,X'F0'
         PUT OUTFILE,TIMEREC
         B     SEXIT
         LTORG
         END
//G.PRTOUT   DD SYSOUT=*
//G.SYSOUT   DD SYSOUT=*
//G.SYSUDUMP DD SYSOUT=*
